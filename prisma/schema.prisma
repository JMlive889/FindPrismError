// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          String       @default("USER") // USER, ADMIN
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  memberships   Membership[]
  uploads       Media[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id           String       @id @default(cuid())
  name         String
  description  String
  price        Int // in cents
  status       String       @default("ACTIVE") // ACTIVE, INACTIVE
  isMembership Boolean      @default(false)
  stripePriceId String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  bookings     Booking[]
  memberships  Membership[]
}

model Addon {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Int      // in cents
  sku         String   @unique
  status      String   @default("ACTIVE") // ACTIVE, INACTIVE
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TravelConfig {
  id                        String   @id @default("default")
  freeZips                  String   // JSON array
  tiers                     String   // JSON array of {priceCents, zips}
  defaultOutsideFreeZipsCents Int    @default(2500)
  fallbackCents             Int      @default(4000)
  updatedAt                 DateTime @updatedAt
}

model Booking {
  id              String    @id @default(cuid())
  userId          String?
  name            String
  email           String
  phone           String
  productId       String
  addons          String?   // JSON array of addon IDs
  zipCode         String?
  travelFee       Int       @default(0)
  subtotal        Int       // base + addons in cents
  total           Int       // subtotal + travel in cents
  scheduledStart  DateTime
  scheduledEnd    DateTime
  notes           String?
  stripePaymentId String?
  status          String    @default("PENDING") // PENDING, CONFIRMED, COMPLETED, CANCELLED
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User?     @relation(fields: [userId], references: [id])
  product         Product   @relation(fields: [productId], references: [id])

  @@index([email, scheduledStart])
  @@index([phone, scheduledStart])
}

model Membership {
  id            String   @id @default(cuid())
  userId        String
  productId     String
  stripeSubId   String   @unique
  status        String   @default("ACTIVE") // ACTIVE, CANCELLED, PAST_DUE
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  product       Product  @relation(fields: [productId], references: [id])
}

model Media {
  id         String   @id @default(cuid())
  url        String
  key        String
  alt        String?
  uploadedBy String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [uploadedBy], references: [id])
}